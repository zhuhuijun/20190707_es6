{
    //二进制
    console.log(0b1010101010);
    //八进制
    console.log(0o10101016710);
}
//用处不是特（trff）别大
{
    console.log('15:',Number.isFinite(15));
    console.log('NaN:',Number.isFinite(NaN));
    console.log('1/0',Number.isFinite('true'/0));
    console.log('NaN:isNaN',Number.isNaN(NaN));
    console.log('NaN:isNaN',Number.isNaN(12));
}
{
    console.log('25',Number.isInteger(25));
    console.log('25',Number.isInteger('25'));
}
//上下限，否则就不准了
{
    console.log(Number.MAX_SAFE_INTEGER);
    console.log(Number.MIN_SAFE_INTEGER);
    console.log('10',Number.isSafeInteger(10));
    console.log('a',Number.isSafeInteger('a'));
}
//取整
{
    console.log(4.1,Math.trunc(4.1));
    console.log(4.9,Math.trunc(4.9));
    
}
//正数
{
    console.log('-5',Math.sign(-5));
    console.log('0',Math.sign(0));
    console.log('6',Math.sign(6));
    console.log('50',Math.sign('50'));
    //不是数[0,1,NaN]
    console.log('foo',Math.sign('foo'));
    
}
//立方根
{
console.log('-1',Math.cbrt(-1));

}